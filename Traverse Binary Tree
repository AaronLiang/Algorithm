package mecury;

import java.util.ArrayList;

//Problem #2 (40 credits)
//Input an array of integers, save the integers into a binary tree, 
//then traverse the tree using preorder, inorder and postorder traverse, 
//then traverse the tree by levels.
//Sample input: {4, 2, 3, 6, 1, 5, 8, 7}
//Output: 
//Preorder traverse: 4 2 1 3 6 5 8 7
//Inorder traverse: 1 2 3 4 5 6 7 8
//Postorder traverse: 1 3 2 5 7 8 6 4
//Traverse by level: 4 2 6 1 3 5 8 7

public class Problem2 {
  static Node root;

	// static int level = 0;

	static void buildBinaryTree(int[] array) {
		if (root == null)
			root = new Node(array[0]);

		for (int i = 0; i < array.length; i++)
			insert(root, new Node(array[i]));
	}

	static void insert(Node node, Node n) {
		if (n.getData() < node.getData()) {
			if (node.left != null)
				insert(node.left, n);
			else
				node.left = n;
		} else if (n.getData() > node.getData()) {
			if (node.right != null)
				insert(node.right, n);
			else
				node.right = n;
		}
		node = n;
	}

	static void preOrder(Node node) {
		if (root == null)
			return;
		System.out.print(node.getData() + "  ");

		if (node.left != null)
			preOrder(node.left);
		if (node.right != null)
			preOrder(node.right);
	}

	static void inOrder(Node node) {
		if (root == null)
			return;
		if (node != null) {
			inOrder(node.left);
			System.out.print(node.getData() + "  ");
			inOrder(node.right);
		}
	}

	static void postOrder(Node node) {
		if (root == null)
			return;
		if (node.left != null)
			postOrder(node.left);

		if (node.right != null)
			postOrder(node.right);

		System.out.print(node.getData() + "  ");
	}

	static void levelTraverse(Node node) {
		if (root == null)
			return;
		
		ArrayList<Node> current = new ArrayList<Node>();
		current.add(root);
		while (current.size() != 0) {
			ArrayList<Node> next = new ArrayList<Node>();
			for (Node n : current) {
				System.out.print(n.data + "  ");
				if (n.left != null)
					next.add(n.left);
				if (n.right != null)
					next.add(n.right);
			}
			current = next;
		}
	}

	public static void main(String args[]) {
		int[] array = { 4, 2, 3, 6, 1, 5, 8, 7 };
		buildBinaryTree(array);

		System.out.print("\nPreorder traverse :  ");
		preOrder(root);
		System.out.print("\nInorder traverse  :  ");
		inOrder(root);
		System.out.print("\nPostorder traverse:  ");
		postOrder(root);
		System.out.print("\nTraverse by level :  ");
		levelTraverse(root);
	}

}

class Node {
	int data;
	Node left = null;
	Node right = null;

	Node(int dd) {
		this.data = dd;
	}

	Node() {
	}

	int getData() {
		return data;
	}
}
