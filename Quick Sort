void quickSort(int[] array , int left, int right){
  int index = partition(int[] array, int left, int right);
  
  if( left < index - 1){//sort left part
    quickSort(array, left, index -1);
  }
  if(index < right) {//sort right part
    quickSort(arrya, index, right);
  }
}

int partition(int[] array, int left, int right){
  int pivot = array[(left + right)/2]; // pick mid as pivot
  
  while(left <= right){
    // find the element which belongs to right
    if(array[left] < pivot)
      left++;
    
    //find the element which belongs to left
    if(array[right] > pivot)
      right--;
    
    if(left <= right){
      int temp = array[left];
      array[left] = array[right];
      array[right] = temp;
      left++;// these two steps are very very important
      right--;
    }
    return left;// why left? why not right??? care!!!! left is the position of pivot?
  }
}




========================================================================
http://www.vogella.com/articles/JavaAlgorithmsQuicksort/article.html
public class Quicksort  {
  private int[] numbers;
  private int number;

  public void sort(int[] values) {
    // Check for empty or null array
    if (values ==null || values.length==0){
      return;
    }
    this.numbers = values;
    number = values.length;
    quicksort(0, number - 1);
  }

  private void quicksort(int low, int high) {
    int i = low, j = high;
    // Get the pivot element from the middle of the list
    int pivot = numbers[low + (high-low)/2];

    // Divide into two lists
    while (i <= j) {
      // If the current value from the left list is smaller then the pivot
      // element then get the next element from the left list
      while (numbers[i] < pivot) {
        i++;
      }
      // If the current value from the right list is larger then the pivot
      // element then get the next element from the right list
      while (numbers[j] > pivot) {
        j--;
      }

      // If we have found a values in the left list which is larger then
      // the pivot element and if we have found a value in the right list
      // which is smaller then the pivot element then we exchange the
      // values.
      // As we are done we can increase i and j
      if (i <= j) {
        exchange(i, j);
        i++;
        j--;
      }
    }
    // Recursion
    if (low < j)
      quicksort(low, j);
    if (i < high)
      quicksort(i, high);
  }

  private void exchange(int i, int j) {
    int temp = numbers[i];
    numbers[i] = numbers[j];
    numbers[j] = temp;
  }
} 
