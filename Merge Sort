 private void mergesort(int[] array, int low, int high) {
    // Check if low is smaller then high, if not then the array is sorted
    if (low < high) {
      // Get the index of the element which is in the middle
      int middle = low + (high - low) / 2;
      // Sort the left side of the array
      mergesort(array, low, middle);
      // Sort the right side of the array
      mergesort(array, middle + 1, high);
      // Combine them both
      merge(array, low, middle, high);
    }
  }

  private void merge(int[] array, int low, int middle, int high) {
    int[] help = new int[array.length];
    
    // Copy both parts into the helper array
    for (int i = low; i <= high; i++) {
      helper[i] = array[i];
    }

    int helperLeft = low;
    int helperRight = middle + 1;
    int current = low;
    
    // Copy the smallest values from either the left or the right side back
    // to the original array
    while (helperLeft <= middle && helpRight <= high) {
      if (helperLeft <= middle && helper[helperLeft] <= helper[helperRight]) {
        array[current++] = helper[helperLeft++];
      } else{
        array[current++] = helper[helperRight++];
      }
    }
    
    // Copy the rest of the left side of the array into the target array
    while (helperLeft <= middle) {// it is inplace only consider left part, right part is already sorted
      array[current++] = helper[helperLeft++];
    }
   
   -----------------------------------------------------
    //two while loop are redandent, merge them in to one
    
    while (helperLeft <= middle) {
      if (helperRight <= high && helper[helperLeft] >= helper[helperRight]) {
        array[current++] = helper[helperRightt++];
      } else{
        array[current++] = helper[helperLeft++];
      }
    }
  ------------------------------------------------------
  }


==============================================================
private static void mergeSort(int start, int end) {
  int mid = (start + end) / 2;
	if(start < end){
		/** DIVIDE: Split from start to mid*/
		mergeSort(start, mid);
		/** DIVIDE: Split from mid + 1 to end*/
		mergeSort(mid+1, end);
		/** CONQUER: Sort & Merge the two arrays*/
		merge(start, mid, end);
	}
}
 
private static void merge(int start, int mid, int end) {
	/** So we have 2 arrays to be SORTED and MERGED.
	 * 	To go through every element we need to find the 
	 *  start of each array. */
	int firstArrStart = start, secondArrStart = mid + 1;
	/** We create a copy of the area that we want to work on as 
	 *  We will be modifying it as we read it and we need to make
	 *  decisions on the data before modification */
	for(int i = start ; i <= end ; i ++)
		inputCopy[i] = input[i];
	/** See post content for explanation of merge routine */
	while(secondArrStart <= end && firstArrStart <= mid)
		if(inputCopy[firstArrStart] >= inputCopy[secondArrStart])
			input[start++] = inputCopy[secondArrStart++];
		else
			input[start++] = inputCopy[firstArrStart++];
 
	while(firstArrStart <= mid)
		input[start++] = inputCopy[firstArrStart++];
 
	while(secondArrStart <= end)
		input[start++] = inputCopy[secondArrStart++];
}
